Script started on Tue 12 Nov 2019 08:36:58 PM EST
zmumbcs@itserver6:~/cs240/hw4$ ls -l
total 28
-rw-r--r-- 1 zmumbcs cs240-1G  107 Nov 12 16:23 calc.h
-rw-r--r-- 1 zmumbcs cs240-1G   34 Nov 12 20:25 calc.in
-rw-r--r-- 1 zmumbcs cs240-1G  596 Nov  7 14:33 getch.c
-rw-r--r-- 1 zmumbcs cs240-1G  633 Nov  7 14:33 getop.c
-rw-r--r-- 1 zmumbcs cs240-1G 1043 Nov 12 18:40 main.c
-rw-r--r-- 1 zmumbcs cs240-1G 1370 Nov  7 14:33 makefile1
-rw-r--r-- 1 zmumbcs cs240-1G  676 Nov 12 16:05 stack.c
-rw-r--r-- 1 zmumbcs cs240-1G    0 Nov 12 20:36 typescript
zmumbcs@itserver6:~/cs240/hw4$ cat calc.h

#define NUMBER '0'

void push(int);
int pop(void);
int getop(char[]);
int getch(void);
void ungetch(int);
zmumbcs@itserver6:~/cs240/hw4$ cat calc.in
292 16 % 292 16 / 16 * + 292 ^ ~ 
zmumbcs@itserver6:~/cs240/hw4$ cat getch.c
/*
 * getch.c
 *
 * getch  returns one  character from stdin 
 * or from the buffer buf if it is not empty
 * ungetch puts one character in the buffer buf 
 */

#include <stdio.h>
#define BUFSIZE 100

char buf[BUFSIZE];        /* buffer for ungetch */
int  bufp = 0;            /* next free position in buf */

int getch(void)           /* get a (possibly pushed back) character */
{
    return(bufp > 0) ? buf[--bufp] : getchar();
}

void ungetch(int c)        /* push character back on input */
{
    if (bufp >= BUFSIZE)
	printf("ungetch: too many character \n");
    else
	buf[bufp++] = c;
}
zmumbcs@itserver6:~/cs240/hw4$ cat main.c
/*
 * main.c
 *
 * reverse polish calculator
 */

#include <stdio.h>
#include "calc.h" /* header file */
#include <math.h>
#include <stdlib.h>

#define MAXOP 100

int main(void)
{
  int type;
  int op2;
  char s[MAXOP];
  
  while ((type = getop(s)) != EOF) 
    {
      switch(type) 
	{
	case NUMBER:
	  push(atoi(s));
	  break;
	case '+':
	  push(pop() + pop());
	  break;
	case '*':
	  push(pop() * pop());
	  break;
	case '-':
	  op2 = pop();
	  push(pop() - op2);
	  break;
	case '/':
	  op2 = pop();
	  if (op2 != 0)
	    push(pop() / op2);
	  else 
	    {
	      printf("error : zero divisor\n");
	      exit(1);
	    }
	  break;
	case '%':
	  op2 = pop();
	  if (op2 != 0)
	    push(pop() % op2);
	  break;
	case '^':
	  push(pop() ^ pop());
	  break;
	case '|':
	  push(pop() | pop());
	  break;
	case '&':
	  push(pop() & pop());
	  break;
	case '~':
	  push(~pop());
	  break;
	case '\n':
	  printf("The answer is %d.\n", pop());
	  break;
	default:
	  printf("error: unknown command %s\n", s);
	  exit(1);
	}
    }
    return 0;
}
zmumbcs@itserver6:~/cs240/hw4$ cat getop.c
/* 
 * getop.c
 *
 * gets next token: operator or numeric operand
 */

#include <stdio.h>
#include <ctype.h>
#include "calc.h"

int getop(char s[])
{
    int i, c;

    while ((s[0] = c = getch()) == ' ' || c == '\t')
	;

    s[1] = '\0';

    if (!isdigit(c) && c != '.')
      return c;  /* not a number */

    /* collect integer part in string s */
    i = 0;
    if (isdigit(c))
      while (isdigit(s[++i] = c = getch()))
	    ;

    /* collect fractional part in string s */
    if (c == '.')
      while (isdigit(s[++i] = c = getch()))
	;
    
    s[i] = '\0';
    if (c != EOF)
      ungetch(c);
    
    return NUMBER;
}


zmumbcs@itserver6:~/cs240/hw4$ cat stack.c
/*
 * stack.c
 *
 * stack routines
 */

#include <stdio.h>
#define MAXVAL 100  /* maximum depth of val stack */

/* even better, we could make the following two defines "static"
   and thus hide these data structures from the rest of the sources */
static int sp = 0;         /* next free stack position */
static int val[MAXVAL]; /* value stack */


/* push: push f onto value stack */
void push(int f)
{
    if (sp < MAXVAL)
	val[sp++] = f;
    else
	printf("error: stack full, can't push %d\n", f);
}

/* pop: pop and return top value from stack */

int pop(void)
{
    if (sp > 0)
	return val[--sp];
    else
      {
	printf("error: stack empty\n");
	return 0;
      }
}

zmumbcs@itserver6:~/cs240/hw4$ cat makefile1
# makefile for hw4
# format of entries;

# < target list >:  	< dependency list >
# 			< command list >

# make will look at the last-write dates of each file, and if the target
# file hasn't been updated since the source files were last modified,
# it will update the target file by executing the shell command. Note that
# the spacing to the < dependency list > and < command list > MUST be done
# with tabs, not spaces.
#
# now here is a Macro as defined in Glass Unix.

cc =	gcc
CFLAGS =   -m32 

calcit:	main.o getop.o stack.o getch.o
		$(cc) $(CFLAGS) -g -o calcit main.o getop.o stack.o getch.o

# note that if calc.h changes, main.c and getop.c must be recompiled

main.o:		main.c calc.h
		$(cc) $(CFLAGS) -c -o main.o main.c
getop.o:	getop.c calc.h
		$(cc) $(CFLAGS) -c -o getop.o getop.c
stack.o:	stack.c 
		$(cc) $(CFLAGS) -c -o stack.o stack.c
getch.o: 	getch.c 
		$(cc) $(CFLAGS) -c -o getch.o getch.c

# this tells make what to make if you just type 'make'; if this isn't there,
# the first rule in the file will be the default.

# default:	calcit

# here is a rule to clean up the directory when calcit is final and you want
# to reduce the clutter in the listing. Note that clean doesn't need to
# depend on any file modification time, so the < dependency list > position is
# just left empty.

clean:
		rm *.o
zmumbcs@itserver6:~/cs240/hw4$ make -f makefile1
gcc -m32  -c -o main.o main.c
gcc -m32  -c -o getop.o getop.c
gcc -m32  -c -o stack.o stack.c
gcc -m32  -c -o getch.o getch.c
gcc -m32  -g -o calcit main.o getop.o stack.o getch.o
zmumbcs@itserver6:~/cs240/hw4$ ./calcit < calc.in
The answer is -1.
zmumbcs@itserver6:~/cs240/hw4$ ls -l
total 52
-rw-r--r-- 1 zmumbcs cs240-1G  107 Nov 12 16:23 calc.h
-rw-r--r-- 1 zmumbcs cs240-1G   34 Nov 12 20:25 calc.in
-rwxr-xr-x 1 zmumbcs cs240-1G 7844 Nov 12 20:38 calcit
-rw-r--r-- 1 zmumbcs cs240-1G  596 Nov  7 14:33 getch.c
-rw-r--r-- 1 zmumbcs cs240-1G 1344 Nov 12 20:38 getch.o
-rw-r--r-- 1 zmumbcs cs240-1G  633 Nov  7 14:33 getop.c
-rw-r--r-- 1 zmumbcs cs240-1G 1344 Nov 12 20:38 getop.o
-rw-r--r-- 1 zmumbcs cs240-1G 1043 Nov 12 18:40 main.c
-rw-r--r-- 1 zmumbcs cs240-1G 2172 Nov 12 20:38 main.o
-rw-r--r-- 1 zmumbcs cs240-1G 1370 Nov  7 14:33 makefile1
-rw-r--r-- 1 zmumbcs cs240-1G  676 Nov 12 16:05 stack.c
-rw-r--r-- 1 zmumbcs cs240-1G 1404 Nov 12 20:38 stack.o
-rw-r--r-- 1 zmumbcs cs240-1G    0 Nov 12 20:36 typescript
zmumbcs@itserver6:~/cs240/hw4$ exit
exit

Script done on Tue 12 Nov 2019 08:39:18 PM EST
